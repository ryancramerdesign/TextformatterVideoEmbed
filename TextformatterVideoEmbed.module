<?php namespace ProcessWire;

/**
 * ProcessWire Video Embedding Textformatter
 *
 * Looks for Youtube or Vimeo URLs and automatically converts them to embeds
 *
 * Copyright (C) 2021 by Ryan Cramer
 * Licensed under MPL 2.0
 * https://processwire.com
 *
 * @property int $maxWidth
 * @property int $maxHeight
 * @property string $maxSize
 * @property int $responsive
 * @property string $wrapStyles
 * @property string $frameStyles
 * @property int $refreshDays
 * @property int $lastMaint Timestamp of last maintenance
 * @property string $aspectRatio
 * @property int $failAction
 * @property int|bool $noCookies
 * @property int|bool $getConsent
 * @property string $consentInfo
 * @property string $consentButtonLabel
 * @property string $consentPrivacyUrl
 * @property int $consentPrivacyPage
 * @property string $consentCheckboxesLabel
 * @property string $consentPrivacyLabel
 *
 * @method array getAspectRatios()
 * @method array getVideoSizes()
 * @method string wrapEmbedCode($embedCode, array $data)
 * @method string embedError($line, $videoURL, $data)
 *
 */

class TextformatterVideoEmbed extends Textformatter implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Video embed for YouTube (and Vimeo)',
			'version' => 202,
			'summary' => 'Enter a full YouTube (or Vimeo) URL by itself in any paragraph (example: https://youtu.be/Wl4XiYadV_k) and this will automatically convert it to an embedded video. This formatter is intended to be run on trusted input. Recommended for use with CKEditor textarea fields.',
			'author' => 'Ryan Cramer',
			'href' => 'https://processwire.com/modules/textformatter-video-embed/',
			'requires' => 'ProcessWire>=3.0.148',
		);
	}

	const dbTableName = 'textformatter_video_embed';
	const logName = 'textformatter-video-embed';

	/**
	 * Default configuration values
	 *
	 * @var array
	 *
	 */
	protected $configDefaults = array(
		'maxSize' => '720p',
		'wrapStyles' => 'position:relative;margin:1em 0;padding-bottom:{pct}%;height:0;overflow:hidden;',
		'frameStyles' => 'position:absolute;top:0;left:0;width:100%;height:100%;',
		'refreshDays' => 0,
		'lastMaint' => 0,
		'failAction' => 0,
		'aspectRatio' => '0',
		'noCookies' => 0,
		'getConsent' => 0,
		'consentInfo' => '(i) Click on this will load data from an external video service:',
		'consentButtonLabel' => 'Fine, lets load this video!',
		'consentPrivacyUrl' => '',
		'consentPrivacyPage' => 0,
		'consentCheckboxesLabel' => 'Remember my decision for <label>%1$s this video</label> <label>%2$s for all videos</label>',
		'consentPrivacyLabel' => 'See: %1$s'
	);

	/**
	 * Verbose embed data defaults
	 *
	 * @var array
	 *
	 */
	protected $verboseDataDefaults = array(
		'valid' => false,
		'title' => '',
		'author_name' => '',
		'author_url' => '',
		'type' => '',
		'height' => '',
		'width' => '',
		'version' => '',
		'provider_name' => '',
		'provider_url' => '',
		'thumbnail_height' => '',
		'thumbnail_width' => '',
		'thumbnail_url' => '',
		'embed_code' => '',
		'video_url' => '',
		'page_id' => 0,
		'field' => '',
	);

	/**
	 * Video sizes
	 *
	 * @var array
	 *
	 */
	protected $videoSizes = array(
		'240p' => array(
			'width' => 426,
			'height' => 240,
			'label' => 'Minimum YouTube size'
		),
		'360p' => array(
			'width' => 640,
			'height' => 360,
			'label' => 'Typical website resolution'
		),
		'480p' => array(
			'width' => 854,
			'height' => 480,
			'label' => 'Standard definition (SD)'
		),
		'720p' => array(
			'width' => 1280,
			'height' => 720,
			'label' => 'High definition (HD) min'
		),
		'1080p' => array(
			'width' => 1920,
			'height' => 1080,
			'label' => 'High definition (HD) max'
		),
		'1440p' => array(
			'width' => 2560,
			'height' => 1440,
			'label' => '2K resolution'
		),
		'2160p' => array(
			'width' => 3840,
			'height' => 2160,
			'label' => '4K resolution'
		),
	);

	/**
	 * Data as used by the get/set functions
	 *
	 */
	protected $data = array();

	/**
	 * Last used HTTP GET URL
	 *
	 * @var string
	 *
	 */
	protected $lastHttpGetVideoID = '';

	/**
	 * Last Page passed to format()
	 *
	 * @var int
	 *
	 */
	protected $lastPageId = 0;

	/**
	 * Name of last Field passed to format()
	 *
	 * @var string
	 *
	 */
	protected $lastFieldName = '';

	/**
	 * Set our configuration defaults
	 *
	 */
	public function __construct() {
		parent::__construct();
		foreach($this->configDefaults as $key => $value) {
			$this->set($key, $value);
		}
	}

	/**
	 * Run daily maintenance
	 *
	 * @return bool|int Return false if not yet time to run, int with quantity of deleted items when run
	 *
	 */
	protected function maintenance() {

		if($this->refreshDays < 1) return false;
		if($this->lastMaint >= (time() - 86400)) return false;

		$table = self::dbTableName;
		$query = $this->wire()->database->prepare("DELETE FROM $table WHERE created<:maxAge");
		$query->bindValue(':maxAge', date('Y-m-d H:i:s', strtotime("-$this->refreshDays DAYS")));
		$query->execute();
		$rowCount = $query->rowCount();
		$this->lastMaint = time();
		$this->wire()->modules->saveConfig($this, 'lastMaint', $this->lastMaint);
		if($rowCount) $this->log("$rowCount videos older than $this->refreshDays days cleared for maintenance");

		return $rowCount;
	}

	/**
	 * Given a service oembed URL and video ID, return the corresponding embed code.
	 *
	 * A cached version of the embed code will be used if possible. When not possible,
	 * it will be retrieved from the service's oembed URL, and then cached.
	 *
	 * @param string $oembedURL
	 * @param string $videoID
	 * @param string $videoURL
	 * @param bool $verbose Get verbose array of data rather than just embed code?
	 * @return string|int|array Returns embed code (string) or HTTP error code (int)
	 *
	 */
	protected function getEmbedCode($oembedURL, $videoID, $videoURL, $verbose = true) {

		$this->maintenance();

		$database = $this->wire()->database;
		$table = self::dbTableName;
		$data = array();

		$query = $database->prepare("SELECT * FROM $table WHERE video_id=:video_id");
		$query->bindValue(":video_id", $videoID);
		$query->execute();

		if($query->rowCount()) {
			$row = $query->fetch(\PDO::FETCH_ASSOC);
			$data = empty($row['data']) ? array() : json_decode($row['data'], true);
			$data = is_array($data) ? array_merge($this->verboseDataDefaults, $data) : $this->verboseDataDefaults;
			$data['created'] = $row['created'];
			$data['embed_code'] = ctype_digit($row['embed_code']) ? (int) $row['embed_code'] : $row['embed_code'];
			$data['valid'] = is_string($data['embed_code']);
		}

		$query->closeCursor();

		if(empty($data)) {
			$data = $this->getNewEmbedCode($oembedURL, $videoID, $videoURL, $verbose);
		}

		return $data;
	}

	/**
	 * Get new embed code now from HTTP
	 *
	 * @param string $oembedURL
	 * @param string $videoID
	 * @param string $videoURL
	 * @param bool $verbose
	 * @return array|int|string
	 * @throws WireException
	 *
	 */
	protected function getNewEmbedCode($oembedURL, $videoID, $videoURL, $verbose = true) {

		$database = $this->wire()->database;
		$table = self::dbTableName;
		$httpErrorCode = 0;
		$maxTries = 3;
		$retry = 0;
		$oembedURL = $this->oembedURL($oembedURL, $videoURL, $videoID);

		$http = new WireHttp();
		$this->wire($http);
		$this->lastHttpGetVideoID = $videoID;
		$data = $http->get($oembedURL);

		if($data) $data = json_decode($data, true);

		if(is_array($data) && isset($data['html'])) {
			// success
			$data = array_merge($this->verboseDataDefaults, $data);
			$data['valid'] = true;
			$data['video_url'] = $videoURL;
			$data['page_id'] = $this->lastPageId;
			$data['field'] = $this->lastFieldName;
			$embedCode = $data['html'];
			if($this->noCookies) {
				// youtube
				$embedCode = str_replace(
					"youtube.com/",
					"youtube-nocookie.com/", // set nocookie domain
					$embedCode
				);
				// vimeo
				$embedCode = str_replace(
					"?app_id=",
					"?dnt=1&app_id=", // add do-not-track parameter
					$embedCode
				);
			}
			unset($data['html']);
		} else {
			// fail: store http code for error reporting and to avoid repeating request
			$data = $this->verboseDataDefaults;
			$httpErrorCode = (int) $http->getHttpCode();
			$data['valid'] = false;
			$embedCode = $httpErrorCode;
		}

		do {
			try {
				$sql = "INSERT INTO $table SET video_id=:videoID, embed_code=:embedCode, created=NOW(), data=:data";
				$query = $database->prepare($sql);
				$query->bindValue(":videoID", $videoID);
				$query->bindValue(":embedCode", "$embedCode");
				$query->bindValue(":data", json_encode($data));
				$query->execute();
				$retry = 0;
			} catch(\Exception $e) {
				$retry++;
				if($retry >= $maxTries) throw $e;
				$this->___upgrade(0, 0);
			}
		} while($retry > 0 && $retry < $maxTries);

		if($httpErrorCode) {
			$this->log("HTTP $httpErrorCode fail for: $videoURL");
		} else {
			$this->log("Retrieved embed for: $videoURL");
		}

		if($verbose) {
			$data['embed_code'] = $embedCode;
		}

		return $verbose ? $data : $embedCode;
	}

	/**
	 * Apply replacements and additions to oembed URL
	 *
	 * @param $oembedURL
	 * @param $videoURL
	 * @param $videoID
	 * @return string
	 *
	 */
	protected function oembedURL($oembedURL, $videoURL, $videoID) {
		$oembedURL = str_replace(
			array('{url}', '{id}'),
			array(urlencode($videoURL), urlencode($videoID)),
			$oembedURL
		);

		if($this->maxSize && strpos($oembedURL, 'maxwidth=') === false) {
			$videoSizes = $this->getVideoSizes();
			$size = $videoSizes[$this->maxSize];
			$oembedURL .= strpos($oembedURL, '?') ? '&' : '?';
			$oembedURL .= "maxwidth=$size[width]&maxheight=$size[height]";
		}

		return $oembedURL;
	}

	/**
	 * Wrap video embed code with responsive div
	 *
	 * @param string $embedCode
	 * @param array $data
	 * @return string
	 *
	 */
	protected function ___wrapEmbedCode($embedCode, array $data) {

		$sanitizer = $this->wire()->sanitizer;
		$frameStyles = $sanitizer->entities($this->frameStyles);
		$wrapStyles = $sanitizer->entities($this->wrapStyles);
		$pct = $this->aspectRatio === '0' ? 0 : (float) $this->aspectRatio;

		if($pct === 0) {
			// auto aspect ratio
			if(!empty($data['height']) && !empty($data['width'])) {
				$pct = 100 * ((int) $data['height']) / ((int) $data['width']);
				$pct = str_replace(',', '.', $pct);
			} else {
				$pct = '56.25'; // 16:9
			}
		}

		if($frameStyles) {
			$frameStyles = str_replace(array('{pct}%', '{pct}', '{percent}%', '{percent}'), "$pct%", $frameStyles);
			$embedCode = str_ireplace('<iframe ', "<iframe style='$frameStyles' ", $embedCode);
		}

		if($wrapStyles) {
			$wrapStyles = str_replace(array('{pct}%', '{pct}', '{percent}%', '{percent}'), "$pct%", $wrapStyles);
			$out = "<div class='TextformatterVideoEmbed' style='$wrapStyles'>$embedCode</div>";
		} else {
			$out = "<div class='TextformatterVideoEmbed'>$embedCode</div>";
		}

		if($this->getConsent){
			$tmpId   = substr(md5($data['video_url']),0,8);
			// user has not seen and consented loading of this video before, so show the embed
			// the consent is stored in a session-cookie
			if (  !$this->wire()->input->cookie('videoconsent-'.$tmpId) == 'yes' &&  !$this->wire()->input->cookie('videoconsent-all') == 'yes') {
				// store the original embed in base64 to use it as data-attr later for replacement
				$tmpCode = base64_encode($out);

				// set outputs for multilanguage
				$lang = $this->wire->user->language;
				$consentInfo            = ( $lang->name && $lang->name != 'default' ) ? $this->get("consentInfo__". $lang->id)            : $this->get("consentInfo");
				$consentCheckboxesLabel = ( $lang->name && $lang->name != 'default' ) ? $this->get("consentCheckboxesLabel__". $lang->id) : $this->get("consentCheckboxesLabel");
				$consentButtonLabel     = ( $lang->name && $lang->name != 'default' ) ? $this->get("consentButtonLabel__". $lang->id)     : $this->get("consentButtonLabel");
				$consentPrivacyLabel    = ( $lang->name && $lang->name != 'default' ) ? $this->get("consentPrivacyLabel__". $lang->id)    : $this->get("consentPrivacyLabel");

				// no prior consent, so show the consent info
				$consentInfo .= '<br>
				<small>' . $data['video_url'] . '</small>';
				if ( $this->consentPrivacyPage ) {
					$privacyLinkName = $this->wire()->pages->get((int) $this->consentPrivacyPage)->title;
					$privacyUrl = $this->wire()->pages->get((int) $this->consentPrivacyPage)->url;
				}
				if ( $this->consentPrivacyUrl ) {
					$privacyLinkName = 'Privacy Policy';
					$privacyUrl = $this->consentPrivacyUrl;
				}
				if ( !empty($privacyUrl) ) {
					$consentInfo .= '<br>' . sprintf($consentPrivacyLabel,'<a target="_blank" href="' . $privacyUrl . '">' . $privacyLinkName . '</a>');
				}
				if ( $data['thumbnail_url'] ) {
					$path = pathinfo( $data['thumbnail_url'] );
					// abs path to cache dir:
					$cacheDir = $this->wire()->config->paths->assets . 'VideoEmbed';
					if ( !is_dir( $cacheDir ) ) {
						// create cache dir
						mkdir( $cacheDir );
					}
					// check for chached cover img
					$cover = $tmpId . '.' . $path['extension'];
					$coverFile = $cacheDir . '/' . $cover;
					if ( !is_file( $coverFile ) ) {
						$http = $this->wire(new WireHttp);
						$coverImg = $http->download($data['thumbnail_url'],$coverFile);
					}
					$coverLocal = $this->wire()->config->urls->assets . 'VideoEmbed/' . $cover;
					$frameStyles .= ' background-image:linear-gradient(to bottom,rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.8) 100%),url('. $coverLocal . ');background-size: cover;background-position:center;color:#fff;';
				}

				$tmp = '
				<div class="video-consent-wrap" id="wrap-'. $tmpId .'" data-code="' . $tmpCode . '" style="' . $wrapStyles . '">
					<div class="video-consent-info" style="' . $frameStyles . '">
						<div>
							<p>' . $consentInfo . '</p>
							<p>' . sprintf($consentCheckboxesLabel,'<input type="checkbox" id="check-single-' . $tmpId .'" class="video-consent-checkbox" name="consent-video" value="ok">','<input type="checkbox" id="check-all-' . $tmpId . '" class="video-consent-checkbox" name="consent-video" value="all">') . '</p>
							<p><button class="video-consent-button" id="btn-' . $tmpId . '">' . $consentButtonLabel . '</button></p>
						</div>
					</div>
				</div>
				';
				$consentJs = '
				<script>
					var videoConsentWrap_' . $tmpId . '    = document.getElementById(\'wrap-' . $tmpId . '\');
					var videoConsentButton_' . $tmpId . '  = document.getElementById(\'btn-' . $tmpId . '\');
					var videoEmbedCode_' . $tmpId . '      = atob(videoConsentWrap_' . $tmpId . ' .getAttribute("data-code"));
					var videoConsentCheckSingle = document.getElementById(\'check-single-' . $tmpId . '\');
					var videoConsentCheckAll    = document.getElementById(\'check-all-' . $tmpId . '\');
					videoConsentButton_' . $tmpId . '.addEventListener(\'click\', function(){
						videoConsentWrap_' . $tmpId . ' .setAttribute(\'style\',\'\');
						videoConsentWrap_' . $tmpId . ' .innerHTML = videoEmbedCode_' . $tmpId . ';
						if ( videoConsentCheckSingle.checked ) {
							document.cookie = \'videoconsent-' . $tmpId . '=yes; path=/\';
						}
						if ( videoConsentCheckAll.checked ) {
							document.cookie = \'videoconsent-all=yes; path=/\';
						}
					},false);
				</script>
				';
				$out = $tmp . $consentJs;
			}
		}

		return $out;
	}

	/**
	 * Format the given text string with Page and Field provided.
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|mixed $value Value is provided as a reference, so is modified directly (not returned).
	 *
	 */
	public function formatValue(Page $page, Field $field, &$value) {
		// apply video embeds
		$this->lastPageId = $page->id;
		$this->lastFieldName = $field->name;
		$this->format($value);
	}

	/**
	 * Text formatting function as used by the Textformatter interface
	 *
	 * Here we look for video codes on first pass using a fast strpos() function.
	 * When found, we do our second pass with preg_match_all and replace the video URLs
	 * with the proper embed codes obtained from each service's oembed web service.
	 *
	 * @var string $str
	 *
	 */
	public function format(&$str) {
		$youtube = strpos($str, 'youtu') !== false;
		$vimeo = strpos($str, 'vimeo.com') !== false;
		if(!$youtube && !$vimeo) return;
		if((strpos($str, 'https://') === 0 || strpos($str, 'http://') === 0)
			&& strpos($str, '<') === false && strpos(trim($str), ' ') === false) {
			$originalStr = $str;
			$paraStr = "<p>" . trim($str) . "</p>";
			$str = $paraStr;
			if($youtube) $this->embedYoutube($str);
			if($vimeo) $this->embedVimeo($str);
			if($str === $paraStr) $str = $originalStr; // no change? restore
		} else {
			if($youtube) $this->embedYoutube($str);
			if($vimeo) $this->embedVimeo($str);
		}
	}

	/**
	 * Check for Youtube URLS and embed when found
	 *
	 * @var string $str
	 *
	 */
	protected function embedYoutube(&$str) {

		// perform fast check before performing regex check
		if(strpos($str, '://www.youtube.com/watch') === false
			&& strpos($str, '://www.youtube.com/v/') === false
			&& strpos($str, '://youtu.be/') === false) return;

		// 1: full URL, 2:video id, 3: query string (optional)
		$regex =
			'#' .
			'<(?:p|h[1-6])' . // open tag <p or <h1, <h2, etc.
			'(?:>|\s+[^>]+>)\s*' . // rest of open tag and close bracket
			'(' . // capture #1: full URL
				'https?://(?:www\.)?youtu(?:\.be|be\.com)+/' . // scheme + host "https://youtu.be/"
				'(?:watch/?\?v=|v/)?' . // optional "watch?v=" or "v/"
				'([^\s&<\'"]+)' . // capture #2: video ID (U&LC letters, numbers)
			')' . // end of capture #1: full URL
			'((?:&|&amp;|\?)[-_,.=&;a-zA-Z0-9]*)?.*?' . // capture #3: optional query string
			'</[ph123456]+>' . // close tag
			'#';

		if(!preg_match_all($regex, $str, $matches)) return;

		$oembedUrl = "https://www.youtube.com/oembed?url={url}&format=json";

		foreach($matches[0] as $key => $line) {
			$youtubeUrl = $matches[1][$key];
			$videoID = $matches[2][$key];
			$queryString = isset($matches[3][$key]) ? $matches[3][$key] : '';
			$data = $this->getEmbedCode($oembedUrl, $videoID, $youtubeUrl);

			if(is_int($data['embed_code'])) {
				// http error code
				if($this->lastHttpGetVideoID === $videoID) {
					// http error code just now, try again using generated URL
					$youtubeUrl2 = "https://www.youtube.com/watch?v=$videoID";
					if($youtubeUrl != $youtubeUrl2) {
						$this->clearVideo($videoID);
						$data = $this->getNewEmbedCode($oembedUrl, $videoID, $youtubeUrl2);
					}
				}
			}

			$embedCode = $data['embed_code'];

			if($data['valid']) {
				if(strlen($queryString)) {
					$queryString = str_replace('&amp;', '&', $queryString);
					$queryString = trim($queryString, '&');
					$embedCode = str_replace("?", "?$queryString&", $embedCode);
				}
				$embedCode = $this->wrapEmbedCode($embedCode, $data);
			} else {
				$embedCode = $this->embedError($line, $youtubeUrl, $data);
			}

			$str = str_replace($line, $embedCode, $str);
		}
	}

	/**
	 * Check for Vimeo URLS and embed when found
	 *
	 * @var string $str
	 *
	 */
	protected function embedVimeo(&$str) {

		if(strpos($str, '://vimeo.com/') === false) return;

		if(!preg_match_all('#<(?:p|h[1-6])(?:>|\s+[^>]+>)\s*(https?://vimeo.com/(?:[^<]*?/|)(\d+)).*?</(?:p|h[1-6])>#', $str, $matches)) return;

		foreach($matches[0] as $key => $line) {
			$videoID = $matches[2][$key];
			$videoURL = "https://vimeo.com/$videoID";
			$oembedURL = "https://vimeo.com/api/oembed.json?url={url}";
			$data = $this->getEmbedCode($oembedURL, $videoID, $videoURL);
			if($data['valid']) {
				$embedCode = $data['embed_code'];
				$embedCode = $this->wrapEmbedCode($embedCode, $data);
			} else {
				$embedCode = $this->embedError($line, $videoURL, $data);
			}
			if($embedCode) $str = str_replace($line, $embedCode, $str);
		}
	}

	/**
	 * Render embed error
	 *
	 * @param string $line
	 * @param string $videoURL
	 * @param array $data
	 * @return string
	 *
	 */
	protected function ___embedError($line, $videoURL, $data) {
		$openTag = substr($line, 0, strpos($line, '>')+1);
		$closeTag = substr($line, strrpos($line, '</'));
		if($this->failAction > 0) {
			$out = "<!--{$videoURL} ($data[embed_code])-->";
		} else {
			$out = "$openTag<span class='TextformatterVideoEmbedError'>$videoURL ($data[embed_code])</span>$closeTag";
		}
		return $out;
	}

	/**
	 * Clear one video from cache
	 *
	 * @param string $videoID
	 * @return bool|int
	 * @throws WireException
	 *
	 */
	public function clearVideo($videoID) {
		$table = self::dbTableName;
		$query = $this->wire()->database->prepare("DELETE FROM $table WHERE video_id=:video_id");
		$query->bindValue(":video_id", $videoID);
		$result = $query->execute();
		return $result ? $query->rowCount() : false;
	}

	/**
	 * Clear all cached video embed codes, forcing it to re-pull
	 *
	 */
	public function clearAllVideos() {
		$this->wire()->database->query("DELETE FROM " . self::dbTableName);
		$this->log("Cleared all video embeds");
	}

	/**
	 * Get verbose data of videos (up to 100 or $options specified limit)
	 *
	 * @param array $options
	 *  - `limit` (int): Max items to return (default=100)
	 *  - `start` (int): Item to start with, -1 for auto according to current pageNum, 0 for first. (default=-1)
	 *  - `sort` (string): How to sort items, one of 'created' (ascending), or `-created` (descending). (default=-created)
	 * @return array
	 *
	 */
	public function getVideos(array $options = array()) {

		$defaults = array(
			'start' => -1,
			'limit' => 100,
			'sort' => '-created',
		);

		$sorts = array(
			'created' => 'created',
			'-created' => 'created DESC',
		);

		$database = $this->wire()->database;
		$table = self::dbTableName;
		$videos = array();
		$options = array_merge($defaults, $options);
		$sort = $options['sort'];
		if(!isset($sorts[$sort])) $sort = $defaults['sort'];
		$orderBy = $sorts[$sort];
		$start = (int) $options['start'];
		$limit = (int) $options['limit'];

		if($limit > 0 && $start < 0) {
			$start = ($this->wire()->input->pageNum() - 1) * $limit;
		}

		$sql =
			"SELECT * FROM $table " .
			"ORDER BY $orderBy " .
			($limit ? "LIMIT $start,$limit" : "");

		$query = $database->prepare($sql);
		$query->execute();

		while($row = $query->fetch(\PDO::FETCH_ASSOC)) {
			$data = empty($row['data']) ? array() : json_decode($row['data'], true);
			$row = array_merge($this->verboseDataDefaults, $row, $data);
			$videos[] = $row;
		}

		$query->closeCursor();

		return $videos;
	}

	/**
	 * Get verbose data of all videos
	 *
	 * @param array $options
	 * @return array
	 *
	 */
	public function getAllVideos(array $options = array()) {
		if(empty($options['limit'])) $options['limit'] = 0;
		if(empty($options['start'])) $options['start'] = 0;
		return $this->getVideos($options);
	}

	/**
	 * Get count of all videos currently in cache
	 *
	 * @return int
	 *
	 */
	public function getNumVideos() {
		$query = $this->wire()->database->prepare("SELECT COUNT(*) FROM " . self::dbTableName);
		$query->execute();
		$count = (int) $query->fetchColumn();
		$query->closeCursor();
		return $count;
	}

	/**
	 * Get aspect ratios
	 *
	 * @return array
	 *
	 */
	public function ___getAspectRatios() {
		return array(
			'0' => $this->_('Auto (use video aspect ratio)'),
			'56.25' => $this->_('Fixed 16:9 (YouTube default)'),
			'75.0' => $this->_('Fixed 4:3'),
			'100.0' => $this->_('Fixed 1:1 (square)'),
		);
	}

	/**
	 * Get video sizes
	 *
	 * @return array
	 *
	 */
	public function ___getVideoSizes() {
		return array(
			'240p' => array(
				'width' => 426,
				'height' => 240,
				'label' => $this->_('Minimum YouTube size')
			),
			'360p' => array(
				'width' => 640,
				'height' => 360,
				'label' => $this->_('Typical website resolution')
			),
			'480p' => array(
				'width' => 854,
				'height' => 480,
				'label' => $this->_('Standard definition (SD)')
			),
			'720p' => array(
				'width' => 1280,
				'height' => 720,
				'label' => $this->_('High definition (HD) min')
			),
			'1080p' => array(
				'width' => 1920,
				'height' => 1080,
				'label' => $this->_('High definition (HD) max')
			),
			'1440p' => array(
				'width' => 2560,
				'height' => 1440,
				'label' => $this->_('2K resolution')
			),
			'2160p' => array(
				'width' => 3840,
				'height' => 2160,
				'label' => $this->_('4K resolution')
			),
		);
	}

	/**
	 * Log a message for this class
	 *
	 * @param string $str Text to log, or omit to return the `$log` API variable.
	 * @param array $options Optional extras to include:
	 *  - `url` (string): URL to record the with the log entry (default=auto-detect)
	 *  - `name` (string): Name of log to use (default=auto-detect)
	 *  - `user` (User|string|null): User instance, user name, or null to log for current User. (default=null)
	 * @return WireLog
	 *
	 */
	public function ___log($str = '', array $options = array()) {
		if(empty($options['name'])) $options['name'] = self::logName;
		if($str && $this->lastPageId) $str .= " [page:$this->lastPageId, field:$this->lastFieldName]";
		return parent::___log($str, $options);
	}

	/**
	 * Module configuration screen
	 *
	 * @param array $data
	 * @return InputfieldWrapper
	 *
	 */
	public function getModuleConfigInputfields(array $data) {

		$modules = $this->wire()->modules;
		$input = $this->wire()->input;

		foreach($this->configDefaults as $key => $value) {
			if(!isset($data[$key])) $data[$key] = $value;
		}

		unset($data['_clearCache']);
		$inputfields = new InputfieldWrapper();

		/** @var InputfieldFieldset $fs */
		$fs = $modules->get('InputfieldFieldset');
		$fs->attr('name', '_fs_sizes');
		$fs->label = $this->_('Sizes');
		$fs->description = $this->_('These settings affect the embed code that is used. As a result, if you change these settings you should clear your video cache afterwards (when videos already present).');
		$fs->themeOffset = 1;
		$inputfields->add($fs);

		/** @var InputfieldSelect $f */
		$f = $modules->get('InputfieldSelect');
		$f->attr('name', 'maxSize');
		$f->label = $this->_('Max video size to request');
		$f->columnWidth = 50;
		$f->addOption('', $this->_('None'));
		foreach($this->getVideoSizes() as $name => $info) {
			$f->addOption($name, "$name: $info[label] ($info[width]x$info[height])");
		}
		$f->val($data['maxSize']);
		$fs->add($f);

		/** @var InputfieldSelect $f */
		$f = $modules->get('InputfieldSelect');
		$f->attr('name', 'aspectRatio');
		$f->label = $this->_('Aspect ratio');
		foreach($this->getAspectRatios() as $value => $label) {
			$f->addOption($value, $label);
		}
		$f->val($data['aspectRatio']);
		$f->columnWidth = 50;
		$fs->add($f);

		$fs = $modules->get('InputfieldFieldset');
		$fs->attr('name', '_fs_gdpr');
		$fs->label = $this->_('GDPR Options');
		$fs->themeOffset = 1;
		$inputfields->add($fs);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f->attr('name', 'noCookies');
		$f->label = $this->_('GDPR: Use the no-cookie / do-not-track version of video URLs');
		$f->notes = $this->_('This setting affects the embed code that is used. As a result, if you change this setting you should clear your video cache afterwards (when videos already present).');
		$f->attr('checked', $this->noCookies ? 'checked' : '');
		$fs->add($f);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f->attr('name', 'getConsent');
		$f->label = $this->_('GDPR: display a consent button before displaying the embedded video.');
		$f->attr('checked', $this->getConsent ? 'checked' : '');
		$fs->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'consentInfo');
		$f->label = $this->_('Consent info');
		$f->description = $this->_('Info to be shown with the consent button.');
		$f->notes = $this->_('Default:') . ' `' . $this->configDefaults['consentInfo'] . '`';
		$f->showIf('getConsent=1');
		$f->val($data['consentInfo']);
		$f->useLanguages = true;
		$f->columnWidth = 50;
		$fs->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'consentButtonLabel');
		$f->label = $this->_('Consent button label');
		$f->description = $this->_('Text of the consent button');
		$f->notes = $this->_('Default:') . ' `' . $this->configDefaults['consentButtonLabel'] . '`';
		$f->showIf('getConsent=1');
		$f->val($data['consentButtonLabel']);
		$f->useLanguages = true;
		$f->columnWidth = 50;
		$fs->add($f);

		/** @var InputfieldPageListSelect $field */
		$f = $modules->get('InputfieldPageListSelect');
		$f->setAttribute('name', 'consentPrivacyPage');
		$f->label = $this->_('Privacy info page');
		$f->attr('value', (int) $this->consentPrivacyPage);
		$f->description = $this->_('Select the page with the privacy policy info');
		$f->notes = $this->_('If set, a link to the privacy info is added to the info.');
		$f->showIf('getConsent=1');
		$f->collapsed = Inputfield::collapsedBlank;
		$f->columnWidth = 50;
		$fs->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'consentPrivacyUrl');
		$f->label = $this->_('Privacy info url');
		$f->description = $this->_('Link to the privacy info');
		$f->notes = $this->_('If set, a link to the privacy info is added to the info. Overrides the privacy info page url if set.');
		$f->showIf('getConsent=1');
		$f->val($data['consentPrivacyUrl']);
		$f->collapsed = Inputfield::collapsedBlank;
		$f->columnWidth = 50;
		$fs->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'consentPrivacyLabel');
		$f->label = $this->_('Text/Label for the privacy link');
		$f->description = $this->_('Text displayed in the frontend');
		$f->notes = $this->_('Default:') . ' `' . $this->configDefaults['consentPrivacyLabel'] . ' `' . ' (Placeholder: `%1$s`: privacy link)';
		$f->showIf('getConsent=1');
		$f->useLanguages = true;
		$f->val($data['consentPrivacyLabel']);
		$f->collapsed = Inputfield::collapsedBlank;
		$fs->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'consentCheckboxesLabel');
		$f->label = $this->_('Text/Label for checkboxes');
		$f->description = $this->_('Text displayed in the frontend');
		$f->notes = $this->_('Default:') . ' `' . $this->configDefaults['consentCheckboxesLabel'] . ' `' . ' (Checkbox placeholders: `%1$s`: current video `%2$s`: all videos)';
		$f->showIf('getConsent=1');
		$f->useLanguages = true;
		$f->val($data['consentCheckboxesLabel']);
		$f->collapsed = Inputfield::collapsedBlank;
		$f->columnWidth = 50;
		$fs->add($f);

		/** @var InputfieldRadios $f */
		$f = $modules->get('InputfieldRadios');
		$f->attr('name', 'failAction');
		$f->label = $this->_('Fail action');
		$f->description = $this->_('What to do with a video URL that the service returns an error for.');
		$f->notes = $this->_('Note that errors and other activity is logged in Setup > Logs > textformatter-video-embed.');
		$f->addOption(0, sprintf($this->_('Leave the URL, span-wrap it and append error code i.e. `%s`'), "<span class='TextformatterVideoEmbedError'>https://youtu.be/abc123 (404)</span>"));
		$f->addOption(1, sprintf($this->_('Add HTML comment around the video URL to hide it, i.e. `%s`'), "<!--https://youtu.be/abc123 (404)-->"));
		if(!$this->failAction) $f->collapsed = Inputfield::collapsedYes;
		$f->val((int) $this->failAction);
		$f->themeOffset = 1;
		$inputfields->add($f);

		/** @var InputfieldFieldset $fs */
		$fs = $modules->get('InputfieldFieldset');
		$fs->attr('name', '_fs_styles');
		$fs->label = $this->_('Embed styles');
		$fs->description = $this->_('The default styles enable a responsive video presentation and support of different aspect ratios.');
		$fs->collapsed = Inputfield::collapsedYes;
		$fs->themeOffset = 1;
		$inputfields->add($fs);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'wrapStyles');
		$f->label = $this->_('Wrap styles');
		$f->description = $this->_('Inline styles applied to `div.TextformatterVideoEmbed` element that wraps the video embed `iframe`.');
		$f->notes = $this->_('Default:') . ' `' . $this->configDefaults['wrapStyles'] . '`';
		$f->val($data['wrapStyles']);
		$fs->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'frameStyles');
		$f->label = $this->_('Frame styles');
		$f->description = $this->_('Inline styles applied to the `iframe` element containing the embedded video.');
		$f->notes = $this->_('Default:') . ' `' . $this->configDefaults['frameStyles'] . '`';
		$f->val($data['frameStyles']);
		$fs->add($f);

		/** @var InputfieldFieldset $fs */
		$fs = $modules->get('InputfieldFieldset');
		$fs->attr('name', '_fs_cache');
		$fs->label = $this->_('Cache');
		$fs->themeOffset = 1;
		$inputfields->add($fs);

		/** @var InputfieldInteger $f */
		$f = $modules->get('InputfieldInteger');
		$f->attr('name', 'refreshDays');
		$f->attr('value', isset($data['refreshDays']) ? (int) $data['refreshDays'] : 0);
		$f->label = $this->_('Refresh time');
		$f->description = $this->_('Refresh video embed codes after this many days, or 0 to cache forever.');
		$fs->add($f);

		if($input->post('_clearCache')) {
			$this->clearAllVideos();
			$modules->message(__('Cleared video embed cache'));
			$numVideos = 0;
		} else {
			/** @var InputfieldCheckbox $f */
			$f = $modules->get('InputfieldCheckbox');
			$f->attr('name', '_clearCache');
			$f->attr('value', 1);
			$f->label = __('Clear videos?');
			$f->description = __('This will clear out cached embed codes. There is no harm in doing this, other than that it will force them to be re-pulled when next accessed.');
			$numVideos = $this->getNumVideos();
			$f->notes = sprintf(__('There are currently %d video(s) cached'), $numVideos);
			if(!$numVideos) $f->collapsed = Inputfield::collapsedYes;
			$fs->add($f);
		}

		/** @var InputfieldMarkup $f */
		$f = $modules->get('InputfieldMarkup');
		$f->attr('name', '_video_list');
		$f->label = $this->_('Recently embedded videos in cache (up to 100)');
		$fs->add($f);

		if($numVideos > 0) {
			/** @var MarkupAdminDataTable $table */
			$table = $modules->get('MarkupAdminDataTable');
			$table->setEncodeEntities(false);
			$videos = $this->getVideos();
			$sanitizer = $this->wire()->sanitizer;
			foreach($videos as $video) {
				if(empty($video['valid'])) continue;
				foreach($video as $key => $value) {
					$video[$key] = $sanitizer->entities($value);
				}
				$thumbUrl = $video['thumbnail_url'];
				$thumb = $thumbUrl ? "<img width='200' src='$thumbUrl' alt='' />" : "&nbsp;";
				$page = $this->wire()->pages->get((int) $video['page_id']);
				$table->headerRow(array(
					'Thumb',
					'Title',
					'Author',
					'Source',
					'Size',
					'Added',
					'Page',
					'Field',
				));
				$table->row(array(
					"<a target='_blank' href='$video[video_url]'>$thumb</a>",
					"<a target='_blank' href='$video[video_url]'>$video[title]</a>",
					"<a target='_blank' href='$video[author_url]'>$video[author_name]</a>",
					"$video[provider_name]",
					"$video[width]x$video[height]",
					wireRelativeTimeStr($video['created'], true),
					"<a href='$page->url'>" . $page->get('title|name') . "</a>",
					"$video[field]",
				));
			}
			$f->value = $table->render();
		} else {
			$f->value = "<p>" . $this->_('There are currently no videos in the cache.') . "</p>";
		}

		return $inputfields;
	}

	/**
	 * Installation routine
	 *
	 */
	public function ___install() {

		/** @var WireDatabasePDO $database */
		$database = $this->wire('database');
		$sql =
			"CREATE TABLE " . self::dbTableName . " (" .
			"video_id VARCHAR(128) NOT NULL PRIMARY KEY, " .
			"embed_code VARCHAR(1024) NOT NULL DEFAULT '', " .
			"created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, " .
			"`data` TEXT, " .
			"INDEX created (created) " .
			")";

		$database->exec($sql);

		$this->log('Module installed');
	}

	/**
	 * Upgrade
	 *
	 * @param $fromVersion
	 * @param $toVersion
	 *
	 */
	public function ___upgrade($fromVersion, $toVersion) {
		if($fromVersion || $toVersion) {}
		$database = $this->wire()->database;
		$table = self::dbTableName;
		$query = $database->prepare("SHOW COLUMNS FROM `$table` WHERE Field='data'");
		$query->execute();
		$numRows = (int) $query->rowCount();
		if(!$numRows) {
			$this->clearAllVideos();
			$query = $database->prepare("ALTER TABLE `$table` ADD `data` TEXT");
			$query->execute();
			$this->log("Added 'data' column to table: $table");
		}
	}

	/**
	 * Uninstallation routine
	 *
	 */
	public function ___uninstall() {
		/** @var WireDatabasePDO $database */
		$database = $this->wire('database');
		try { $database->exec("DROP TABLE " . self::dbTableName); } catch(\Exception $e) { }
		$log = $this->wire()->log;
		$logFile = $log->getFilename(self::logName);
		if(is_file($logFile)) $log->delete(self::logName);

		$cacheDir = $this->wire()->config->paths->assets . 'VideoEmbed';
		if($cacheDir && is_dir($cacheDir)) {
			$this->message("Removing cache path: $cacheDir");
			$this->wire()->files->rmdir($cacheDir, true);
		}
	}


	/**
	 * The following functions are to support the ConfigurableModule interface
	 * since Textformatter does not originate from WireData
	 *
	 * @param string $key
	 * @param mixed $value
	 * @return $this
	 *
	 */
	public function set($key, $value) {
		if($key === 'nocookies') $key = 'noCookies';
		$this->data[$key] = $value;
		return $this;
	}

	/**
	 * Get configuration item
	 *
	 * @param string $key
	 * @return mixed
	 *
	 */
	public function get($key) {
		$value = $this->wire($key);
		if($value) return $value;
		return isset($this->data[$key]) ? $this->data[$key] : null;
	}

	public function __set($key, $value) {
		$this->set($key, $value);
	}

	public function __get($key) {
		return $this->get($key);
	}
}
